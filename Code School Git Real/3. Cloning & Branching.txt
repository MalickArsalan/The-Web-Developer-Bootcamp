Cloning A Repository

1. git clone <URL> -> This will create a folder of the same name, that of your repo
URL -> URL of the remote repository

2. git clone <URL> <Folder Name>
Folder Name -> the name that you want to set for local folder

Git Clone -> What does Git Clone do?
 
	a. Download the entire repository into a new git-real directory.
	b. Adds the "origin" remote pointing it to the clone URL.
	c. Checks out initial branch(likely master). And Sets the HEAD


Branching Out
Need to work on a feature that will take a some time
Time to Branch Out
3.Git branch <Branch Name>


Switching To A Branch
Time to jump on that new 'office' branch.
4. git checkout <branch Name>
Now we switched to other branch

Working On A Branch
5. echo "Sample text" > cat.txt	// This will create a file and write follwoing text "Sample text"
$ git commit -m "Create quantum cat."

Note:	Now this commit will add to our new branch time line
		$ ls -> here at new branch time line we can see "cat.txt" file

Back To Master
$ git checkout master
$ ls 
Note: Now in master time Line we can not see "cat.txt" through ls command
$ git log 
Note: Same you will not see "Quantum cat commit" there

Time To Merge
$ git checkout master 
$ ls
6. git merge <Branch Name> //merge brings one branch changes into another
Following message will appear
Message: Fast-Forward	-> 


Fast-Forward To The Future
Condition to fast-forward merge
* If we create a branch and make one commit or several and do nothing  on other branch
it's very easy for Git to merge the cat branch back into master because nothing was
modified in the meantime.

Branch Clean Up
When you are done with the branch, you can safely remove it.
7. git branch -d <Branch Name>

Non-Fast-Forward
8. git checkout -b admin
// Switch to a new branch 'admin'
-b -> Creates a branch and then check it out branch 

Practice
1. We add new folder and inside we create two files.
2. separately commit both file.
3. Meanwhile S1 occurs in master branch.
4. checkout to master.
5. verify if we are on same branch.
6. pull latest master branch from remote repository.
7. fix the issues. 
8. commit the file.
9. finally we push the changes back to remote master
10. Now S1 is resolve move back to the branch where you left you latest work.
11. go back to master and merge the branch on which you latest work has been done.
12. Suddenly you will see some thing ugly or weired, don't panic!.
13. It is just Vi, Git uses if no default editor is set to edit commit messages.

Vi commands
j -> Down			ESC -> leave mode
k -> Up				i 	-> insert mode
h -> Left			:wq	-> save and quit
l -> right			:q!	-> cancel & quit

Recursive Merging
* GIt can't fast-forward since changes were made in both branches.

* A commit was created to merge the two branches. 
